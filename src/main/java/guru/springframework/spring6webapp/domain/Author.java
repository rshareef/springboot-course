package guru.springframework.spring6webapp.domain;

import jakarta.persistence.*;

import java.util.Objects;
import java.util.Set;

// using Jakarta Persistence - this is what is telling JPA that 'Author' is going to be an entity (object that exists) persisted to the database
// Jakarta Persistence
@Entity
public class Author {
    @Id
    // saying that the ID will get generated by the database.
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    private String firstName;
    private String lastName;


    // (Step 3) setting up the JPA Mapping
    @ManyToMany (mappedBy = "authors")
    // (Step 2) set up relationship between entities
    private Set<Book> books;
    public Set<Book> getBooks() {
        return books;
    }
    public void setBooks(Set<Book> books) {
        this.books = books;
    }


    // use IntelliJ to generate Getters and Setters for all of these values
    // private values, so we need getters and setters for each
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    // Overriding the default print method.
    @Override
    public String toString() {
        return "Author{" +
                "id=" + id +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", books=" + books +
                '}';
    }

    // Generated equals and hashcode() [to determine if entities are equal]
    @Override
    public boolean equals(Object o) {
        // if the object which invoked the function is equal to the object o, return true (objects are equal)
        if (this == o) return true;
        // if o is null (and or) the objects are of two different classes, return false (objects are not equal)
        if (o == null || getClass() != o.getClass()) return false;
        // explicit typecasting 'o' object as an instance of the author class
        // WHY?
        Author author = (Author) o;
        return Objects.equals(id, author.id);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(id);
    }
}
